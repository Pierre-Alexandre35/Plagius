package com.plagus_server.analysis.lingustic.functions.listeners;

import com.plagus_server.analysis.lingustic.python.Python3BaseListener;
import com.plagus_server.analysis.lingustic.python.Python3Parser;

import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.HashMap;
import java.util.Map;

/**
 * This custom listener renames all variables in a Python 3 function body, including the function
 * name, to canonical names (i.e. var0, var1,...). This handles the case of variable renaming in
 * code plagiarism.
 */
public class PyVarReplacementListener extends Python3BaseListener implements VarListener {
  private boolean inName, inFunc;
  private int varCount;
  private Map<String, String> varMap;
  private StringBuilder sb;


  /**
   * Stringbuilder reference needed so new function with renamed variables can be written to it.
   *
   * @param sb a Stringbuilder reference
   */
  public PyVarReplacementListener(StringBuilder sb) {
    inName = false;
    varCount = 0;
    varMap = new HashMap<>();
    this.sb = sb;
  }

  /**
   * Renames the function name and parameters into canonical names. Function names are treated
   * like variable names here.
   *
   * @param ctx Python 3 Function Definition context, generated by ANTLR
   */
  @Override
  public void enterFuncdef(Python3Parser.FuncdefContext ctx) {
    if (!varMap.containsKey(ctx.NAME().getText())) {
      varMap.put(ctx.NAME().getText(), "var" + varCount);
      varCount++;
    }

    if (ctx.parameters().typedargslist() != null) {
      String[] params = ctx.parameters().typedargslist().getText().split(",");
      for (String param : params) {
        if (!varMap.containsKey(param)) {
          varMap.put(param, "var" + varCount);
          varCount++;
        }
      }
    }
  }

  /**
   * Makes sure that a variable is renamed in a variable expression.
   *
   * @param ctx Python 3 Atom Context, generated by ANTLR
   */
  @Override
  public void enterAtom(Python3Parser.AtomContext ctx) {
    if (ctx.NAME() != null) {
      inName = true;
    }
  }

  @Override
  public void exitAtom(Python3Parser.AtomContext ctx) {
    inName = false;
  }

  /**
   * If terminal node is a variable name, write its canonical name to the Stringbuilder.
   * Otherwise, write the text of the original terminal node to the Stringbuilder.
   *
   * @param node a Terminal node, generated by ANTLR
   */
  @Override
  public void visitTerminal(TerminalNode node) {
    if (inName) {
      if (!varMap.containsKey(node.getText())) {
        varMap.put(node.getText(), "var" + varCount);
        varCount++;
      }
    }

    String text = node.getText();
    if (node.getSymbol().getType() == 39||node.getSymbol().getType() == 99) {
      text = "\n";
    }
    if (varMap.containsKey(text)) {
      sb.append(varMap.get(text));
    } else {
      sb.append(text);
    }
  }

  /**
   * For testing purposes
   *
   * @return a Map that maps the original variable name to its canonical name
   */
  public Map<String, String> getVarMap() {
    return varMap;
  }
}
